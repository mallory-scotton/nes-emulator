///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Utils.hpp"

///////////////////////////////////////////////////////////////////////////////
// Namespace NES
///////////////////////////////////////////////////////////////////////////////
namespace NES
{

///////////////////////////////////////////////////////////////////////////////
// Constants
///////////////////////////////////////////////////////////////////////////////
constexpr int INSTRUCTION_MODE_MASK = 0x3;
constexpr int OPERATION_MASK = 0xE0;
constexpr int OPERATION_SHIFT = 5;
constexpr int ADDR_MODE_MASK = 0x1C;
constexpr int ADDR_MODE_SHIFT = 2;
constexpr int BRANCH_INSTRUCTION_MASK = 0x1F;
constexpr int BRANCH_INSTRUCTION_MASK_RESULT = 0x10;
constexpr int BRANCH_CONDITION_MASK = 0x20;
constexpr int BRANCH_ON_FLAG_SHIFT = 6;
constexpr int NMI_VECTOR = 0xFFFA;
constexpr int RESET_VECTOR = 0xFFFC;
constexpr int IRQ_VECTOR = 0xFFFE;

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
enum class BranchOnFlag
{
    NEGATIVE,
    OVERFLOW,
    CARRY,
    ZERO
};

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
enum class Operation0
{
    BIT = 1,
    STY = 4,
    LDY,
    CPY,
    CPX
};

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
enum class Operation1
{
    ORA,
    AND,
    EOR,
    ADC,
    STA,
    LDA,
    CMP,
    SBC
};

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
enum class Operation2
{
    ASL,
    ROL,
    LSR,
    ROR,
    STX,
    LDX,
    DEC,
    INC
};

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
enum class AddrMode1
{
    INDEXED_INDIRECT_X,
    ZERO_PAGE,
    IMMEDIATE,
    ABSOLUTE,
    INDIRECT_Y,
    INDEXED_X,
    ABSOLUTE_Y,
    ABSOLUTE_X
};

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
enum class AddrMode2
{
    IMMEDIATE,
    ZERO_PAGE,
    ACCUMULATOR,
    ABSOLUTE,
    INDEXED = 5,
    ABSOLUTE_INDEXED = 7
};

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
enum class OperationImplied
{
    NOP  = 0xea,
    BRK  = 0x00,
    JSR  = 0x20,
    RTI  = 0x40,
    RTS  = 0x60,

    JMP  = 0x4C,
    JMPI = 0x6C,

    PHP  = 0x08,
    PLP  = 0x28,
    PHA  = 0x48,
    PLA  = 0x68,

    DEY  = 0x88,
    DEX  = 0xca,
    TAY  = 0xa8,
    INY  = 0xc8,
    INX  = 0xe8,

    CLC  = 0x18,
    SEC  = 0x38,
    CLI  = 0x58,
    SEI  = 0x78,
    TYA  = 0x98,
    CLV  = 0xb8,
    CLD  = 0xd8,
    SED  = 0xf8,

    TXA  = 0x8a,
    TXS  = 0x9a,
    TAX  = 0xaa,
    TSX  = 0xba
};

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
enum class InterruptType
{
    IRQ,
    NMI,
    BRK
};

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
static constexpr int OperationCycles[0x100] =
{
    7, 6, 0, 0, 0, 3, 5, 0, 3, 2, 2, 0, 0, 4, 6, 0,
    2, 5, 0, 0, 0, 4, 6, 0, 2, 4, 0, 0, 0, 4, 7, 0,
    6, 6, 0, 0, 3, 3, 5, 0, 4, 2, 2, 0, 4, 4, 6, 0,
    2, 5, 0, 0, 0, 4, 6, 0, 2, 4, 0, 0, 0, 4, 7, 0,
    6, 6, 0, 0, 0, 3, 5, 0, 3, 2, 2, 0, 3, 4, 6, 0,
    2, 5, 0, 0, 0, 4, 6, 0, 2, 4, 0, 0, 0, 4, 7, 0,
    6, 6, 0, 0, 0, 3, 5, 0, 4, 2, 2, 0, 5, 4, 6, 0,
    2, 5, 0, 0, 0, 4, 6, 0, 2, 4, 0, 0, 0, 4, 7, 0,
    0, 6, 0, 0, 3, 3, 3, 0, 2, 0, 2, 0, 4, 4, 4, 0,
    2, 6, 0, 0, 4, 4, 4, 0, 2, 5, 2, 0, 0, 5, 0, 0,
    2, 6, 2, 0, 3, 3, 3, 0, 2, 2, 2, 0, 4, 4, 4, 0,
    2, 5, 0, 0, 4, 4, 4, 0, 2, 4, 2, 0, 4, 4, 4, 0,
    2, 6, 0, 0, 3, 3, 5, 0, 2, 2, 2, 0, 4, 4, 6, 0,
    2, 5, 0, 0, 0, 4, 6, 0, 2, 4, 0, 0, 0, 4, 7, 0,
    2, 6, 0, 0, 3, 3, 5, 0, 2, 2, 2, 2, 4, 4, 6, 0,
    2, 5, 0, 0, 0, 4, 6, 0, 2, 4, 0, 0, 0, 4, 7, 0
};

} // !namespace NES
