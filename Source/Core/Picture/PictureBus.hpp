///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Core/Shared/Bus.hpp"

///////////////////////////////////////////////////////////////////////////////
// Namespace NES
///////////////////////////////////////////////////////////////////////////////
namespace NES
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class PictureBus : public Bus
{
protected:
    ///////////////////////////////////////////////////////////////////////////
    // Protected members
    ///////////////////////////////////////////////////////////////////////////
    size_t m_nameTables[4];         //<! Name tables for the PPU
    std::vector<Byte> m_palette;    //<! Palette for the PPU
    std::vector<Byte> m_ram;        //<! RAM for the PPU

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    PictureBus(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual ~PictureBus() = default;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param address
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual Byte Read(Address address) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param address
    /// \param value
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void Write(Address address, Byte value) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param mapper
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual bool SetMapper(std::shared_ptr<Mapper> mapper) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param address
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Byte ReadPalette(Byte address);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void UpdateMirroring(void);
};

} // !namespace NES
