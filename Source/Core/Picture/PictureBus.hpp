///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Core/Shared/Bus.hpp"

///////////////////////////////////////////////////////////////////////////////
// Namespace NES
///////////////////////////////////////////////////////////////////////////////
namespace NES
{

///////////////////////////////////////////////////////////////////////////////
/// \brief Picture bus class for handling PPU memory
///
/// This class extends the Bus class to manage the PPU's memory, including
/// name tables, palettes, and RAM. It provides methods for reading and
/// writing to the PPU's memory, as well as managing the mapper associated
/// with the PPU. The PictureBus is responsible for handling the specific
/// memory layout and mirroring required by the NES PPU.
///
///////////////////////////////////////////////////////////////////////////////
class PictureBus : public Bus
{
protected:
    ///////////////////////////////////////////////////////////////////////////
    // Protected members
    ///////////////////////////////////////////////////////////////////////////
    size_t m_nameTables[4];         //<! Name tables for the PPU
    std::vector<Byte> m_palette;    //<! Palette for the PPU
    std::vector<Byte> m_ram;        //<! RAM for the PPU

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructor for PictureBus class
    ///
    ///////////////////////////////////////////////////////////////////////////
    PictureBus(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Destructor for PictureBus class
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual ~PictureBus() = default;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Read from the PPU memory
    ///
    /// \param address Address to read from
    ///
    /// \return The byte read from the PPU memory
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual Byte Read(Address address) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Write to the PPU memory
    ///
    /// \param address Address to write to
    /// \param value Value to write
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void Write(Address address, Byte value) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Set the mapper for the PictureBus
    ///
    /// \param mapper Shared pointer to the mapper to set
    ///
    /// \return True if the mapper was set successfully, false otherwise
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual bool SetMapper(std::shared_ptr<Mapper> mapper) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Read from the palette
    ///
    /// \param address Address to read from the palette
    ///
    /// \return The byte read from the palette
    ///
    ///////////////////////////////////////////////////////////////////////////
    Byte ReadPalette(Byte address);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Update the mirroring of the PPU memory
    ///
    ///////////////////////////////////////////////////////////////////////////
    void UpdateMirroring(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void ScanlineIRQ(void);
};

} // !namespace NES
