///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Utils.hpp"

///////////////////////////////////////////////////////////////////////////////
// Namespace NES
///////////////////////////////////////////////////////////////////////////////
namespace NES
{

///////////////////////////////////////////////////////////////////////////////
// Forward declarations
///////////////////////////////////////////////////////////////////////////////
class Cartridge;

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Mapper
{
public:
    ///////////////////////////////////////////////////////////////////////////
    // Public members
    ///////////////////////////////////////////////////////////////////////////
    Uint8 id;                       //<! Mapper ID

protected:
    ///////////////////////////////////////////////////////////////////////////
    // Protected members
    ///////////////////////////////////////////////////////////////////////////
    Cartridge& m_cartridge;         //<! Reference to the cartridge

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param cartridge
    /// \param id
    ///
    ///////////////////////////////////////////////////////////////////////////
    Mapper(Cartridge& cartridge, Uint8 id);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param address
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual Byte ReadPGR(Address address) = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param address
    /// \param value
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void WritePGR(Address address, Byte value) = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param address
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual Byte ReadCHR(Address address) = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param address
    /// \param value
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void WriteCHR(Address address, Byte value) = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    const Cartridge& GetCartridge(void) const;
};

} // !namespace NES
