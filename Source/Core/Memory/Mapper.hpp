///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Utils.hpp"
#include "Core/Processor/IRQHandler.hpp"
#include <memory>
#include <functional>

///////////////////////////////////////////////////////////////////////////////
// Namespace NES
///////////////////////////////////////////////////////////////////////////////
namespace NES
{

///////////////////////////////////////////////////////////////////////////////
// Forward declarations
///////////////////////////////////////////////////////////////////////////////
class Cartridge;

///////////////////////////////////////////////////////////////////////////////
/// \brief Mapper class for handling memory mapping
///
/// This class serves as a base for all mappers used in the NES system.
/// It provides an interface for reading and writing to program and character
/// memory, and it holds a reference to the cartridge that it is associated
/// with.
///
///////////////////////////////////////////////////////////////////////////////
class Mapper
{
public:
    ///////////////////////////////////////////////////////////////////////////
    // Public members
    ///////////////////////////////////////////////////////////////////////////
    Uint8 id;                       //<! Mapper ID

protected:
    ///////////////////////////////////////////////////////////////////////////
    // Protected members
    ///////////////////////////////////////////////////////////////////////////
    Cartridge& m_cartridge;         //<! Reference to the cartridge

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructor for Mapper class
    ///
    /// \param cartridge Reference to the cartridge
    /// \param id Mapper ID
    ///
    ///////////////////////////////////////////////////////////////////////////
    Mapper(Cartridge& cartridge, Uint8 id);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Read program memory (PGR)
    ///
    /// \param address Address to read from
    ///
    /// \return The byte read from program memory
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual Byte ReadPGR(Address address) = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Write to program memory (PGR)
    ///
    /// \param address Address to write to
    /// \param value Value to write
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void WritePGR(Address address, Byte value) = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Read character memory (CHR)
    ///
    /// \param address Address to read from
    ///
    /// \return The byte read from character memory
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual Byte ReadCHR(Address address) = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Write to character memory (CHR)
    ///
    /// \param address Address to write to
    /// \param value Value to write
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void WriteCHR(Address address, Byte value) = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void ScanlineIRQ(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get the cartridge associated with this mapper
    ///
    /// \return Reference to the cartridge
    ///
    ///////////////////////////////////////////////////////////////////////////
    const Cartridge& GetCartridge(void) const;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param type
    /// \param cartridge
    /// \param irq
    /// \param callback
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static std::unique_ptr<Mapper> CreateMapper(
        Uint8 type,
        Cartridge& cartridge,
        IRQHandler& irq,
        std::function<void(void)> callback
    );
};

} // !namespace NES
