///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Utils.hpp"
#include "Core/Enums.hpp"
#include "Core/Cartridge.hpp"
#include "Core/Audio.hpp"
#include "Core/Controller.hpp"
#include "Core/Memory.hpp"
#include "Core/Picture.hpp"
#include "Core/Processor.hpp"
#include "Core/Shared.hpp"
#include <memory>
#include <chrono>

///////////////////////////////////////////////////////////////////////////////
// Namespace NES
///////////////////////////////////////////////////////////////////////////////
namespace NES
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Emulator
{
private:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    using TimePoint = std::chrono::high_resolution_clock::time_point;
    using Duration = std::chrono::high_resolution_clock::duration;

private:
    ///////////////////////////////////////////////////////////////////////////
    // Private member variables
    ///////////////////////////////////////////////////////////////////////////
    Cartridge m_cartridge;              //<!
    CPU m_cpu;                          //<!
    Audio::Player m_player;             //<!
    PictureBus m_pbus;                  //<!
    PPU m_ppu;                          //<!
    APU m_apu;                          //<!
    std::shared_ptr<Mapper> m_mapper;   //<!
    Controller m_ctrl1;                 //<!
    Controller m_ctrl2;                 //<!
    MainBus m_mbus;                     //<!
    TimePoint m_lastWakeUp;             //<!
    Duration m_elapsedTime;             //<!
    bool m_paused;                      //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructor for the Emulator class
    ///
    /// \param romPath Path to the ROM file
    ///
    ///////////////////////////////////////////////////////////////////////////
    Emulator(const Path& romPath);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Toggle the pause state of the emulator
    ///
    ///////////////////////////////////////////////////////////////////////////
    void TogglePause(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Check if the emulator is currently paused
    ///
    /// \return True if the emulator is paused, false otherwise
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool IsPaused(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Skip one cycle in the emulator
    ///
    ///////////////////////////////////////////////////////////////////////////
    void SkipOneCycle(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Update the emulator state
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Update(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get the current screen data
    ///
    /// \return Pointer to the screen data array
    ///
    ///////////////////////////////////////////////////////////////////////////
    const NES::Byte* GetScreenData(void) const;

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Callback for DMC DMA operations
    ///
    /// \param address Address to read from
    ///
    /// \return The byte read from the DMC memory
    ///
    ///////////////////////////////////////////////////////////////////////////
    Byte DMCDMACallback(Address address);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Callback for OAM DMA operations
    ///
    /// \param page Page number to read from
    ///
    ///////////////////////////////////////////////////////////////////////////
    void OAMDMACallback(Byte page);
};

} // !namespace NES
