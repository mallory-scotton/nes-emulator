///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Utils.hpp"
#include "Core/Audio/Divider.hpp"
#include "Core/Audio/FrameClockable.hpp"
#include <cstddef>
#include <cstdint>

///////////////////////////////////////////////////////////////////////////////
// Namespace NES::Audio
///////////////////////////////////////////////////////////////////////////////
namespace NES::Audio
{

///////////////////////////////////////////////////////////////////////////////
// Audio Unit Declarations
///////////////////////////////////////////////////////////////////////////////
class Pulse;

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class LengthCounter : public FrameClockable
{
public:
    ///////////////////////////////////////////////////////////////////////////
    // Public members
    ///////////////////////////////////////////////////////////////////////////
    bool halt;      //<!
    bool enabled;   //<!
    int counter;    //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Default constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    LengthCounter(void);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param value
    ///
    ///////////////////////////////////////////////////////////////////////////
    void SetEnable(bool value);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool IsEnabled(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param index
    ///
    ///////////////////////////////////////////////////////////////////////////
    void SetFromTable(size_t index);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void HalfFrameClock(void) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool IsMuted(void) const;
};

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class LinearCounter : public FrameClockable
{
public:
    ///////////////////////////////////////////////////////////////////////////
    // Public members
    ///////////////////////////////////////////////////////////////////////////
    bool reload;        //<!
    int reloadValue;    //<!
    bool control;       //<!
    int counter;        //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Default constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    LinearCounter(void);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param value
    ///
    ///////////////////////////////////////////////////////////////////////////
    void SetLinear(int value);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void QuarterFrameClock(void) override;
};

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Volume : public FrameClockable
{
public:
    ///////////////////////////////////////////////////////////////////////////
    // Public members
    ///////////////////////////////////////////////////////////////////////////
    Divider divider;        //<!
    Uint32 fixedVolume;     //<!
    Uint32 decayVolume;     //<!
    bool constantVolume;    //<!
    bool isLooping;         //<!
    bool shouldStart;       //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    Volume(void);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void QuarterFrameClock(void) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    int Get(void) const;
};

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Sweep : public FrameClockable
{
public:
    ///////////////////////////////////////////////////////////////////////////
    // Public members
    ///////////////////////////////////////////////////////////////////////////
    Pulse& pulse;           //<!
    int period;             //<!
    bool enabled;           //<!
    bool reload;            //<!
    bool negate;            //<!
    Byte shift;             //<!
    bool onesComplement;    //<!
    Divider divider;        //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param pulse
    /// \param onesComplement
    ///
    ///////////////////////////////////////////////////////////////////////////
    Sweep(Pulse& pulse, bool onesComplement);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void HalfFrameClock(void) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param current
    /// \param target
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static bool IsMuted(int current, int target);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param current
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    int CalculateTarget(int current) const;
};

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class PulseDuty
{
public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    enum class Type
    {
        SEQ_12_5   = 0,
        SEQ_25     = 1,
        SEQ_50     = 2,
        SEQ_25_INV = 3,
    };

public:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    static const int count = 4;
    static const int length = 8;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param cycle
    /// \param index
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static bool Active(Type cycle, int index);
};

} // !namespace NES::Audio
