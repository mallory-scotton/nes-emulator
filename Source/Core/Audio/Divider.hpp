///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Utils.hpp"

///////////////////////////////////////////////////////////////////////////////
// Namespace NES::Audio
///////////////////////////////////////////////////////////////////////////////
namespace NES::Audio
{

///////////////////////////////////////////////////////////////////////////////
/// \brief Divider class
///
/// This class implements a simple divider that counts up to a specified
/// period and then triggers an event. It is useful for creating timed events
/// in audio processing, such as generating a square wave or other periodic
/// signals.
///
///////////////////////////////////////////////////////////////////////////////
class Divider
{
private:
    ///////////////////////////////////////////////////////////////////////////
    // Private members
    ///////////////////////////////////////////////////////////////////////////
    int m_period;       //<! Period of the divider
    int m_counter;      //<! Counter for the divider

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructor for the Divider class
    ///
    /// \param period The period of the divider, which determines how often
    /// it triggers
    ///
    ///////////////////////////////////////////////////////////////////////////
    Divider(int period);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Reset the divider
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Reset(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Update the divider
    ///
    /// \return True if the period has been reached, false otherwise
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool Clock(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get the current period of the divider
    ///
    /// \param period The new period to set for the divider
    ///
    ///////////////////////////////////////////////////////////////////////////
    void SetPeriod(int period);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get the current period of the divider
    ///
    /// \return The current period of the divider
    ///
    ///////////////////////////////////////////////////////////////////////////
    int GetPeriod(void) const;
};

} // !namespace NES::Audio
