///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Utils.hpp"
#include "Core/Audio/RingBuffer.hpp"
#include "Core/Audio/MiniAudio.h"
#include <chrono>

///////////////////////////////////////////////////////////////////////////////
// Namespace NES::Audio
///////////////////////////////////////////////////////////////////////////////
namespace NES::Audio
{

///////////////////////////////////////////////////////////////////////////////
/// \brief Audio player class
///
///////////////////////////////////////////////////////////////////////////////
class Player
{
private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Callback function for the audio player
    ///
    ///////////////////////////////////////////////////////////////////////////
    struct CallbackData
    {
        RingBuffer<float>& buffer;  //<!
        ma_resampler* resampler;    //<!
        std::vector<float> frames;  //<!
        bool mute;                  //<!
        int remainingRounds;        //<!
    };

private:
    ///////////////////////////////////////////////////////////////////////////
    // Constants
    ///////////////////////////////////////////////////////////////////////////
    const int outputSampleRate = ma_standard_sample_rate_44100;

public:
    ///////////////////////////////////////////////////////////////////////////
    // Public members
    ///////////////////////////////////////////////////////////////////////////
    const int inputSampleRate;  //<! Sample rate of the input audio
    RingBuffer<float> queue;    //<! Ring buffer for audio data

private:
    ///////////////////////////////////////////////////////////////////////////
    // Private members
    ///////////////////////////////////////////////////////////////////////////
    CallbackData m_data;        //<! Data for the audio callback
    bool m_initialized;         //<! Indicate if the player is initialized
    ma_device_config m_config;  //<! Configuration for the audio device
    ma_device m_device;         //<! Audio device instance
    ma_resampler m_resampler;   //<! Resampler instance

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructor for the audio player
    ///
    /// \param inputRate The sample rate of the input audio
    ///
    ///////////////////////////////////////////////////////////////////////////
    Player(int inputRate);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Destructor for the audio player
    ///
    ///////////////////////////////////////////////////////////////////////////
    ~Player();

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Initializes the audio player
    ///
    /// \return True if the player was successfully initialized, false
    /// otherwise
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool Start(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Stops the audio player
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Mute(void);

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Callback function for the audio player
    ///
    /// \param device MiniAudio device instance
    /// \param output Pointer to the output audio data
    /// \param input Pointer to the input audio data
    /// \param outputFrameCount Number of frames in the output buffer
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void DataCallback(
        ma_device* device,
        void* output,
        const void* input,
        ma_uint32 outputFrameCount
    );
};

} // !namespace NES::Audio
