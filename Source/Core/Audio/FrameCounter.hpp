///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Utils.hpp"
#include "Core/Audio/FrameClockable.hpp"
#include "Core/Processor/IRQHandler.hpp"
#include <vector>
#include <functional>

///////////////////////////////////////////////////////////////////////////////
// Namespace NES::Audio
///////////////////////////////////////////////////////////////////////////////
namespace NES::Audio
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class FrameCounter
{
public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Frame counter mode
    ///
    ///////////////////////////////////////////////////////////////////////////
    enum class Mode
    {
        Seq4Step = 0,
        Seq5Step = 1
    };

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    using Slot = std::reference_wrapper<FrameClockable>;

public:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    constexpr static int Q1 = 7457;         //<!
    constexpr static int Q2 = 14913;        //<!
    constexpr static int Q3 = 22371;        //<!
    constexpr static int Q4 = 29829;        //<!
    constexpr static int Q5 = 37281;        //<!

    constexpr static int preQ4 = Q4 - 1;    //<!
    constexpr static int postQ4 = Q4 + 1;   //<!
    constexpr static int seq4step = postQ4; //<!
    constexpr static int seq5step = Q5 + 1; //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    std::vector<Slot> slots;    //<! Slots for frame clocking
    Mode mode;                  //<! Frame counter mode
    int counter;                //<! Frame counter value
    bool interruptInhibit;      //<! If true, IRQ will not be triggered
    IRQHandler& irq;            //<! IRQ handler for frame counter
    bool frameInterrupt;        //<! If true, frame interrupt is pending

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Default constructor
    ///
    /// \param slots Slots for frame clocking
    /// \param irq IRQ handler for frame counter
    ///
    ///////////////////////////////////////////////////////////////////////////
    FrameCounter(std::vector<Slot> slots, IRQHandler& irq);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Clock the frame counter
    ///
    ///////////////////////////////////////////////////////////////////////////
    void ClearFrameInterrupt(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Clock the frame counter
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Clock(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Reset the frame counter
    ///
    /// \param mode Frame counter mode
    /// \param irqInhibit If true, IRQ will not be triggered
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Reset(Mode mode, bool irqInhibit);
};

} // !namespace NES::Audio
